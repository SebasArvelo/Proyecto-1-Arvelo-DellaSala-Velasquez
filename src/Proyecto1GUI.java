import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.graphstream.graph.*;
import org.graphstream.graph.implementations.*;
import org.graphstream.ui.view.Viewer;

public class Proyecto1GUI extends javax.swing.JFrame {

    Grafo grafo;
    
    public Proyecto1GUI() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        jButton6.setEnabled(false);
        agregarNodoBoton.setEnabled(false);
        eliminarNodoBoton.setEnabled(false);
        listaUsuarios.setEnabled(false);
        errorNodo.setVisible(false);
        errorRelacion.setVisible(false);
        relacionLista1.setEnabled(false);
        relacionLista2.setEnabled(false);
        agregarRelacionBoton.setEnabled(false);
        dfs.setEnabled(false);
        bfs.setEnabled(false);
        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files","txt");
        fileChooser.setFileFilter(filter);
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        traversalButton = new javax.swing.ButtonGroup();
        saveAlert = new javax.swing.JDialog();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        numberIslands = new javax.swing.JLabel();
        dfs = new javax.swing.JRadioButton();
        bfs = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        puentesText = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        agregarNodoBoton = new javax.swing.JButton();
        eliminarNodoBoton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        islasText = new javax.swing.JTextArea();
        jButton6 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        idTexto = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        usuarioTexto = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        listaUsuarios = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        relacionLista1 = new javax.swing.JComboBox<>();
        relacionLista2 = new javax.swing.JComboBox<>();
        errorNodo = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        tiempoAmistad = new javax.swing.JTextField();
        agregarRelacionBoton = new javax.swing.JButton();
        errorRelacion = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        guardar = new javax.swing.JMenu();

        jButton4.setText("No");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        jButton5.setText("Si");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel9.setText("<html>Actualmente ya tiene un grafo cargado en memoria. Desea guardar sus cambios antes de cargar el nuevo grafo ?</html>");

        javax.swing.GroupLayout saveAlertLayout = new javax.swing.GroupLayout(saveAlert.getContentPane());
        saveAlert.getContentPane().setLayout(saveAlertLayout);
        saveAlertLayout.setHorizontalGroup(
            saveAlertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, saveAlertLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jButton4)
                .addGap(60, 60, 60)
                .addComponent(jButton5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, saveAlertLayout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );
        saveAlertLayout.setVerticalGroup(
            saveAlertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, saveAlertLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(saveAlertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addGap(15, 15, 15))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Grafo:");

        numberIslands.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        numberIslands.setText("Islas:");

        traversalButton.add(dfs);
        dfs.setSelected(true);
        dfs.setText("DFS");
        dfs.setName(""); // NOI18N
        dfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dfsActionPerformed(evt);
            }
        });

        traversalButton.add(bfs);
        bfs.setText("BFS");
        bfs.setName(""); // NOI18N
        bfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bfsActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Algoritmo de Recorrido:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Puentes:");

        jScrollPane1.setMinimumSize(new java.awt.Dimension(14, 14));

        puentesText.setEditable(false);
        puentesText.setColumns(10);
        puentesText.setRows(5);
        jScrollPane1.setViewportView(puentesText);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Modificar Grafo:");

        agregarNodoBoton.setText("Agregar");
        agregarNodoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarNodoBotonActionPerformed(evt);
            }
        });

        eliminarNodoBoton.setText("Eliminar");
        eliminarNodoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarNodoBotonActionPerformed(evt);
            }
        });

        jScrollPane3.setMinimumSize(new java.awt.Dimension(14, 14));

        islasText.setEditable(false);
        islasText.setColumns(10);
        islasText.setRows(5);
        jScrollPane3.setViewportView(islasText);

        jButton6.setText("Mostrar Grafo");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel10.setText("Agregar Nodo:");

        jLabel5.setText("ID:");

        jLabel6.setText("Usuario:");

        jLabel11.setText("Eliminar Nodo:");

        jLabel12.setText("Agregar Relación:");

        errorNodo.setForeground(new java.awt.Color(255, 0, 0));
        errorNodo.setText("Esta ID ya existe.");

        jLabel14.setText("Tiempo de amistad:");

        agregarRelacionBoton.setText("Agregar");
        agregarRelacionBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarRelacionBotonActionPerformed(evt);
            }
        });

        errorRelacion.setForeground(new java.awt.Color(255, 0, 0));
        errorRelacion.setText("Error de relación.");

        jMenu1.setText("Cargar Grafo");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        guardar.setText("Guardar Grafo");
        guardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                guardarMouseClicked(evt);
            }
        });
        jMenuBar1.add(guardar);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dfs)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(numberIslands, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bfs)
                        .addGap(90, 90, 90))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(5, 5, 5))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(idTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(12, 12, 12)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(usuarioTexto)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(agregarNodoBoton))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(listaUsuarios, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(eliminarNodoBoton))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(233, 234, Short.MAX_VALUE)))
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(errorNodo)
                            .addComponent(jLabel12)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(relacionLista1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(relacionLista2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tiempoAmistad, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(agregarRelacionBoton))
                            .addComponent(errorRelacion))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(1, 1, 1)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dfs)
                    .addComponent(bfs))
                .addGap(7, 7, 7)
                .addComponent(numberIslands)
                .addGap(9, 9, 9)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel4)
                .addGap(12, 12, 12)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(idTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(usuarioTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agregarNodoBoton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorNodo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eliminarNodoBoton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(relacionLista1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(relacionLista2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tiempoAmistad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(agregarRelacionBoton)
                        .addComponent(jLabel14)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorRelacion)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
    * Despliega una ventana para elegir el archivo a cargar
    */
    private void abrirMenuArchivos(){
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String filename = fileChooser.getSelectedFile().getAbsolutePath();
            grafo = new Grafo();
            cargarGrafo(filename);
            jButton6.setEnabled(true);
            agregarNodoBoton.setEnabled(true);
            eliminarNodoBoton.setEnabled(true);
            listaUsuarios.setEnabled(true);
            relacionLista1.setEnabled(true);
            relacionLista2.setEnabled(true);
            agregarRelacionBoton.setEnabled(true);
            dfs.setEnabled(true);
            bfs.setEnabled(true);
            
            listaUsuarios.removeAllItems();
            relacionLista1.removeAllItems();
            relacionLista2.removeAllItems();
            
            actualizarInformacion();
            listarUsuarios();
        }
    }
    
        /**
    * Leer un grafo desde un archivo
    */
    public void cargarGrafo(String filename){
        grafo.listaAd = new ListaAdyacencia();
        try {
            File in = new File(filename);
            Scanner lector = new Scanner(in);
            String linea = lector.nextLine();
            if (linea.equals("Usuarios")){
                linea = lector.nextLine();
                while (!linea.equals("Relaciones") ) { 
                    String[] usuario = linea.split(", ");
                    grafo.agregarNodo(new Usuario(Integer.parseInt(usuario[0]), usuario[1]));
                    linea = lector.nextLine();
                }
                while (lector.hasNextLine()) {
                    linea = lector.nextLine();
                    String[] relacion = linea.split(", ");
                    grafo.agregarArco(Integer.parseInt(relacion[0]), Integer.parseInt(relacion[1]), Integer.parseInt(relacion[2]));
                }
            }
            lector.close();
        } catch (FileNotFoundException e) {
            System.out.println("Archivo Inválido");
        }
    }
    
    /**
    * Lista los usuarios en los jBoxes donde se escojen los usuarios
    */
    private void listarUsuarios(){
        int n = grafo.listaAd.n;
        for(int i=0; i < n; i++){
            FilaAdyacencia fila = grafo.listaAd.obtenerFila(i);
            Usuario usuario = fila.usuario;
            String etiqueta = "(" + Integer.toString(usuario.id) + ") " + usuario.usuario;
            listaUsuarios.addItem(etiqueta);
            relacionLista1.addItem(etiqueta);
            relacionLista2.addItem(etiqueta);
        }
    }
    
    /**
    * Actualiza los puentes e islas mostrados
    */
    private void actualizarInformacion(){
        String islas = grafo.obtenerIslas("dfs");
        String puentes = grafo.obtenerPuentes();
        islasText.setText(islas);
        puentesText.setText(puentes);
    }
    
    /**
    * Muestra nueva ventana al hacer click en Cargar Grafo
    */
    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        if(grafo != null){
            saveAlert.pack();
            saveAlert.setLocationRelativeTo(null);
            saveAlert.setVisible(true);
        } else {
            abrirMenuArchivos();
        }
    }//GEN-LAST:event_jMenu1MouseClicked
    
    /**
    * Muestra el resultado de hacer un dfs
    */
    private void dfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dfsActionPerformed
        String islas = grafo.obtenerIslas("dfs");
        islasText.setText(islas);
    }//GEN-LAST:event_dfsActionPerformed
    
    /**
    * Muestra el resultado de hacer un bfs
    */
    private void bfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bfsActionPerformed
        String islas = grafo.obtenerIslas("bfs");
        islasText.setText(islas);
    }//GEN-LAST:event_bfsActionPerformed
    
    /**
    * Agrega un usuario, si la id ya existe muestra un mensaje de error
    */
    private void agregarNodoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarNodoBotonActionPerformed
        String id = idTexto.getText();
        String usuario = usuarioTexto.getText();
        
        boolean fueAgregado = grafo.agregarNodo(new Usuario(Integer.parseInt(id), usuario));
        if(!fueAgregado){
            errorNodo.setVisible(true);
        } else {
            idTexto.setText("");
            usuarioTexto.setText("");
            errorNodo.setVisible(false);
            actualizarInformacion();
            listarUsuarios();
        }
    }//GEN-LAST:event_agregarNodoBotonActionPerformed
    
    /**
    * Muestra una ventana para guardar el grafo viejo y abrir uno nuevo
    */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        saveAlert.setVisible(false);
        
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String filename = fileChooser.getSelectedFile().getAbsolutePath();
            grafo.guardarGrafo(filename);        
        }
        
        abrirMenuArchivos();
    }//GEN-LAST:event_jButton5ActionPerformed
    
    /**
    * No se quiere guardar el grafo anterior, se abre solo la ventana de abrir un nuevo archivo
    */
    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        saveAlert.setVisible(false);
        abrirMenuArchivos();
    }//GEN-LAST:event_jButton4MouseClicked
    
    /**
    * Se grafica el grafo
    */
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        System.setProperty("org.graphstream.ui", "swing");
        Graph grafoDibujo = new SingleGraph("Mostrar Grafo");

        grafoDibujo.setAttribute("ui.stylesheet", 
            "node{\n" + "size: 30px, 30px;\n" + "fill-color: #f7f7f0;\n" + "text-mode: normal; \n" + "}" + 
            "edge{\n text-background-mode: plain; \n}");
        grafoDibujo.setAttribute("ui.antialias");
        
        int n = grafo.listaAd.n;
        for(int i=0; i < n; i++){
            int id = grafo.listaAd.obtenerFila(i).usuario.id;
            grafoDibujo.addNode(Integer.toString(id)).setAttribute("ui.label", Integer.toString(id));
        }

        for(int i=0; i <  n; i++){
            FilaAdyacencia fila = grafo.listaAd.obtenerFila(i);
            int idUsuario =  fila.usuario.id;
            int nAmistades =  fila.amigos.n;
            for(int j=0; j < nAmistades; j++){
                Arco arco = fila.amigos.obtenerPorIndice(j);
                int idAmigo = arco.id;
                
                if(idUsuario < idAmigo){
                    String etiqueta1 = Integer.toString(idUsuario);
                    String etiqueta2 = Integer.toString(idAmigo);
                    String etiqueta3 = Integer.toString(arco.amistad);
                    grafoDibujo.addEdge(etiqueta1 + etiqueta2, etiqueta1, etiqueta2).setAttribute("ui.label", etiqueta3);
                }
            }
        }
        
        Viewer viewer = grafoDibujo.display();
        viewer.setCloseFramePolicy(Viewer.CloseFramePolicy.HIDE_ONLY);
    }//GEN-LAST:event_jButton6ActionPerformed
    
    /**
    * Se elimina un nodo del grafo y de los elementos que listan usuarios
    */
    private void eliminarNodoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarNodoBotonActionPerformed
        String usuario = String.valueOf(listaUsuarios.getSelectedItem());

        String id = usuario.substring(usuario.indexOf("(")+1, usuario.indexOf(")"));
        grafo.eliminarNodo(Integer.parseInt(id)); 
        listaUsuarios.removeItem(usuario);
        relacionLista1.removeItem(usuario);
        relacionLista2.removeItem(usuario);
        
        actualizarInformacion();
    }//GEN-LAST:event_eliminarNodoBotonActionPerformed
    
    /**
    * Se agrega una nueva relación al grafo, o se muestran mensajes de error
    */
    private void agregarRelacionBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarRelacionBotonActionPerformed
        String usuario = String.valueOf(relacionLista1.getSelectedItem());
        String amigo = String.valueOf(relacionLista2.getSelectedItem());
        String tiempo = tiempoAmistad.getText();
        int amistad;

        String idUsuario = usuario.substring(usuario.indexOf("(")+1, usuario.indexOf(")"));
        String idAmigo = amigo.substring(amigo.indexOf("(")+1, amigo.indexOf(")"));
        
        if(idUsuario.equals(idAmigo)){
            errorRelacion.setText("Ambos usuarios no pueden ser el mismo");
            errorRelacion.setVisible(true);
        } else {
            try {
                amistad =  Integer.parseInt(tiempo);    
            } catch(Exception e) {
                errorRelacion.setText("Introduzca un número como tiempo de amistad");
                errorRelacion.setVisible(true);
                return;
            }
            
            boolean agregado = grafo.agregarArco(Integer.parseInt(idUsuario), Integer.parseInt(idAmigo) , amistad);
            if(agregado==false){
                errorRelacion.setText("Esta relación ya existe");
                errorRelacion.setVisible(true);
            } else {
                errorRelacion.setText("");
                errorRelacion.setVisible(false);
                tiempoAmistad.setText("");
                actualizarInformacion();
            }
        }
    }//GEN-LAST:event_agregarRelacionBotonActionPerformed
    
    /**
    * Se guarda el grafo
    */
    private void guardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guardarMouseClicked
        if(grafo != null){
            if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                String filename = fileChooser.getSelectedFile().getAbsolutePath();
                grafo.guardarGrafo(filename);
            }
        }
    }//GEN-LAST:event_guardarMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Proyecto1GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Proyecto1GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Proyecto1GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Proyecto1GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Proyecto1GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarNodoBoton;
    private javax.swing.JButton agregarRelacionBoton;
    private javax.swing.JRadioButton bfs;
    private javax.swing.JRadioButton dfs;
    private javax.swing.JButton eliminarNodoBoton;
    private javax.swing.JLabel errorNodo;
    private javax.swing.JLabel errorRelacion;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu guardar;
    private javax.swing.JTextField idTexto;
    private javax.swing.JTextArea islasText;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox<String> listaUsuarios;
    private javax.swing.JLabel numberIslands;
    private javax.swing.JTextArea puentesText;
    private javax.swing.JComboBox<String> relacionLista1;
    private javax.swing.JComboBox<String> relacionLista2;
    private javax.swing.JDialog saveAlert;
    private javax.swing.JTextField tiempoAmistad;
    private javax.swing.ButtonGroup traversalButton;
    private javax.swing.JTextField usuarioTexto;
    // End of variables declaration//GEN-END:variables
}
